import java.util.*;
import java.io.*;

public class Main {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static StringBuilder sb = new StringBuilder();
    static StringTokenizer st;
    static int n, m, v;
    static List<Integer>[] edges;
    static boolean[] vis;

    static void input() throws IOException {
        st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        v = Integer.parseInt(st.nextToken());
        edges = new ArrayList[n + 1];
        for(int i = 1; i <= n; ++i) {
            edges[i] = new ArrayList<>();
        }
        for(int i = 0;i < m;++i) {
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            edges[a].add(b);
            edges[b].add(a);
        }
        for (int i = 1; i <= n; ++i) {
            Collections.sort(edges[i]);
        }
        vis = new boolean[n + 1];
    }

    static void dfs(int cur) {
        vis[cur] = true;
        sb.append(cur).append(' ');
        for (int nxt : edges[cur]) {
            if(vis[nxt]) continue;
            dfs(nxt);
        }
    }

    static void bfs() {
        vis = new boolean[n + 1];
        vis[v] = true;
        Deque<Integer> q = new ArrayDeque<>();
        q.add(v);
        while (!q.isEmpty()) {
            int cur = q.pollFirst();
            sb.append(cur).append(' ');
            for (int nxt : edges[cur]) {
                if(vis[nxt]) continue;
                vis[nxt] = true;
                q.addLast(nxt);
            }
        }
    }

    static void solution() {
        dfs(v);
        sb.append('\n');
        bfs();
        System.out.println(sb);
    }

    public static void main(String[] args) throws IOException {
        input();
        solution();
    }
}
